import * as Errors from '@oclif/errors';
import { ActionBase } from './action/base';
import { config, Config } from './config';
import { ExitError } from './exit';
import { IPromptOptions } from './prompt';
import * as Table from './styled/table';
export declare const ux: {
    config: Config;
    warn: typeof Errors.warn;
    error: typeof Errors.error;
    exit: typeof Errors.exit;
    readonly prompt: (name: string, options?: IPromptOptions) => Promise<any>;
    readonly confirm: (message: string) => Promise<boolean>;
    readonly action: ActionBase;
    styledObject(obj: any, keys?: string[] | undefined): void;
    readonly styledHeader: (header: string) => void;
    readonly styledJSON: (obj: any) => void;
    readonly table: typeof Table.default;
    done(): Promise<void>;
    trace(format: string, ...args: string[]): void;
    debug(format: string, ...args: string[]): void;
    info(format: string, ...args: string[]): void;
    log(format?: string | undefined, ...args: string[]): void;
    url(text: string, uri: string, params?: {}): void;
    annotation(text: string, annotation: string): void;
    flush(): Promise<void>;
};
export default ux;
export declare const cli: {
    config: Config;
    warn: typeof Errors.warn;
    error: typeof Errors.error;
    exit: typeof Errors.exit;
    readonly prompt: (name: string, options?: IPromptOptions) => Promise<any>;
    readonly confirm: (message: string) => Promise<boolean>;
    readonly action: ActionBase;
    styledObject(obj: any, keys?: string[] | undefined): void;
    readonly styledHeader: (header: string) => void;
    readonly styledJSON: (obj: any) => void;
    readonly table: typeof Table.default;
    done(): Promise<void>;
    trace(format: string, ...args: string[]): void;
    debug(format: string, ...args: string[]): void;
    info(format: string, ...args: string[]): void;
    log(format?: string | undefined, ...args: string[]): void;
    url(text: string, uri: string, params?: {}): void;
    annotation(text: string, annotation: string): void;
    flush(): Promise<void>;
};
export { config, ActionBase, Config, ExitError, IPromptOptions, Table };
