/// <reference types="node" />
import CLI = require('cli-ux');
import HTTP = require('http-call');
import netrc = require('netrc-parser');
import apiClient = require('./api_client');
import file = require('./file');
import git = require('./git');
import mutex = require('./mutex');
import flags = require('./flags');
export declare const deps: {
    readonly cli: {
        config: CLI.Config;
        warn: (input: string | Error) => void;
        error: {
            (input: string | Error, options: {
                code?: string | undefined;
                exit: false;
            }): void;
            (input: string | Error, options?: {
                code?: string | undefined;
                exit?: number | undefined;
            } | undefined): never;
        };
        exit: (code?: number | undefined) => never;
        readonly prompt: (name: string, options?: CLI.IPromptOptions | undefined) => Promise<any>;
        readonly confirm: (message: string) => Promise<boolean>;
        readonly action: CLI.ActionBase;
        styledObject(obj: any, keys?: string[] | undefined): void;
        readonly styledHeader: (header: string) => void;
        readonly styledJSON: (obj: any) => void;
        readonly table: typeof CLI.Table.default;
        done(): Promise<void>;
        trace(format: string, ...args: string[]): void;
        debug(format: string, ...args: string[]): void;
        info(format: string, ...args: string[]): void;
        log(format?: string | undefined, ...args: string[]): void;
        url(text: string, uri: string, params?: {} | undefined): void;
        annotation(text: string, annotation: string): void;
        flush(): Promise<void>;
    };
    readonly HTTP: typeof HTTP;
    readonly netrc: netrc.Netrc;
    readonly Mutex: typeof mutex.Mutex;
    readonly yubikey: {
        disable: () => void;
        enable: () => void;
        platform: NodeJS.Platform;
    };
    readonly APIClient: typeof apiClient.APIClient;
    readonly file: typeof file;
    readonly flags: typeof flags;
    readonly Git: typeof git.Git;
};
export default deps;
